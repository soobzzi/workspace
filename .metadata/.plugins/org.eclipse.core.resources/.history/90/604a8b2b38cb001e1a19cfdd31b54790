package com.model2.mvc.service.user.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;

import com.model2.mvc.common.SearchVO;
import com.model2.mvc.common.util.DBUtil;
import com.model2.mvc.service.product.vo.ProductVO;
import com.model2.mvc.service.user.vo.UserVO;

public class ProductDAO {
	
	public ProductDAO() {
	}
	
	public ProductVO findProduct(int prodno) throws Exception{
		return ;
		
	}
	
	public void insertProduct(ProductVO productVO) throws Exception{
		
		Connection con = DBUtil.getConnection();
		
		String sql = "insert into PRODUCT values(?,?,?,?,?,?,?)";
		
		PreparedStatement stmt = con.prepareStatement(sql);
		
		stmt.setInt(1, productVO.getProdNo());
		stmt.setString(2, productVO.getProdName());
		stmt.setString(3, productVO.getManuDate());
		stmt.setInt(4, productVO.getPrice());
		stmt.setString(5, productVO.getFileName());
		stmt.setString(6, productVO.getProdDetail());
		stmt.setDate(7, productVO.getRegDate());
		stmt.executeUpdate();
		
		con.close();
		
	}
	
	public void updateProduct(ProductVO productVO) throws Exception{
		
	}

	public HashMap<String,Object> getProductList(SearchVO searchVO) throws Exception{
		
		Connection con = DBUtil.getConnection();
		
		String sql = "select * from PRODUCT";
		
		PreparedStatement stmt = con.prepareStatement(sql, 
														ResultSet.TYPE_SCROLL_INSENSITIVE
														, ResultSet.CONCUR_UPDATABLE);
		
		ResultSet rs = stmt.executeQuery();
		
		rs.last();
		int total = rs.getRow();
		System.out.println("로우의 수: "+total);
		
		HashMap<String,Object> map = new HashMap<String,Object>();
		
		map.put("count", new Integer(total));
		
		rs.absolute(searchVO.getPage() * searchVO.getPageUnit() - searchVO.getPageUnit()+1);
		System.out.println("searchVO.getPage():" + searchVO.getPage());
		System.out.println("searchVO.getPageUnit():" + searchVO.getPageUnit());
		
		ArrayList<ProductVO> list = new ArrayList<ProductVO>();
		if (total > 0) {
			for (int i = 0; i < searchVO.getPageUnit(); i++) {
				ProductVO vo = new ProductVO();
				vo.setProdNo(rs.getInt("PROD_NO"));
				vo.setProdName(rs.getString("PROB_NAME"));
				vo.setManuDate(rs.getString("MANUFACTURE_DAY"));
				vo.setPrice(rs.getInt("PRICE"));
				vo.setFileName(rs.getString("IMAGE_FILE"));
				vo.setProdDetail(rs.getString("PROD_DETAIL"));
				vo.setRegDate(rs.getDate("REG_DATE"));
				
				list.add(vo);
				
			if (!rs.next())
					break;
			}
		}
		
		System.out.println("list.size() : " list.size());
		map.put("list",list);
		System.out.println("map().size : " + map.size());
		
		con.close();
		
		return map;
		
	}

	public static void main(String[] args) {
		getProdNo
	}
	
	
}
